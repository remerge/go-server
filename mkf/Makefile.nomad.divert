_DIVERT_HOST_NAME ?= $(shell echo $(DIVERT_TARGET) | cut -d . -f 1)
_DIVERT_CLUSTER ?= $(shell echo $(DIVERT_TARGET) | cut -d . -f 2)
IMAGE_REGISTRY := europe-west4-docker.pkg.dev/artifact-registry-ff9b/services/
PROJECT ?= $(notdir $(word 2,$(shell grep '^module ' < go.mod)))
PACKAGE ?= github.com/remerge/$(PROJECT)
NAME = $(shell \
	if [ -f nomad.variables.hcl ]; \
	then \
		echo $$(grep 'job_name = ' < nomad.variables.hcl | \
		awk '{ gsub("\"","",$$3); print $$3}'); \
	else\
		echo $$(grep 'job ' < nomad.hcl | \
		awk '{ gsub("\"","",$$2); print $$2}'); \
	fi \
	)
TASK_IMAGE = $(IMAGE_REGISTRY)$(NAME):dev.$(shell whoami).$(shell git rev-parse --short HEAD)
PRIORITY := 70
DIVERT_HOST_NAME = $(shell echo $(_DIVERT_HOST_NAME) | tr '[:upper:]' '[:lower:]')
DIVERT_CLUSTER ?= $(shell echo $(_DIVERT_CLUSTER) | tr '[:upper:]' '[:lower:]')
UPPER_DIVERT_CLUSTER = $(shell echo $(DIVERT_CLUSTER) | tr '[:lower:]' '[:upper:]')

define setup-nomad-env
export NOMAD_ADDR = http://nomad.service.$(DIVERT_CLUSTER).consul:4646/
export NOMAD_TOKEN = $(shell \
	auto_nomad_token=""; \
	if which op > /dev/null 2>&1; then \
		if token=$$(op read op://Development/NOMAD_TOKEN_$(UPPER_DIVERT_CLUSTER)/credential); then \
			auto_nomad_token="$$token"; \
		fi; \
	fi; \
	if [ -z "$${auto_nomad_token}" ]; then \
		eval "echo $$NOMAD_TOKEN_$(UPPER_DIVERT_CLUSTER)"; \
	else\
		echo "$${auto_nomad_token}"; \
	fi\
)
endef

.nomad-env:
	$(eval $(call setup-nomad-env))

.input-validation-host:
ifeq ($(DIVERT_HOST_NAME),)
	@echo "DIVERT_HOST_NAME is empty (validate DIVERT_TARGET='$(DIVERT_TARGET)' against '%node%.%host%' format)"
	@exit 1
endif

.token-validation:
ifeq ($${NOMAD_TOKEN},)
	@echo "Error: Missing Token: Please set Nomad Token for \
$(DIVERT_CLUSTER) as NOMAD_TOKEN_$(UPPER_DIVERT_CLUSTER)!"
	@exit 1
endif

.input-validation-cluster:
ifeq ($(DIVERT_CLUSTER),)
	@echo "DIVERT_CLUSTER is empty (validate DIVERT_TARGET='$(DIVERT_TARGET)' against '%node%.%host%' format)"
	@exit 1
endif

.check-support:
	@if [ ! -f nomad.hcl ] && [ ! -f nomad.variables.hcl ]; \
	then echo "Error: Divert not supported"; \
	exit 1; fi

.input-validation: .input-validation-host .input-validation-cluster .token-validation

.check-dependencies: .check-support
	@command -v nomad >/dev/null 2>&1 \
	|| { echo >&2 "Error: Please install hashicorp nomad to proceed ..."; exit 1; }

	@command -v nomad-pack >/dev/null 2>&1 \
	|| { echo >&2 "Error: Please install nomad-pack to proceed ..."; exit 1; }

	@command -v docker >/dev/null 2>&1 \
	|| { echo >&2 "Error: Please install docker to proceed ..."; exit 1; }

divert: .check-dependencies .nomad-env .input-validation
	@mkdir -p .build
	@docker build --build-arg \
	"GO_VERSION=$$(grep '^go ' < go.mod | awk '{print $$2}')" \
	--build-arg "CI_COMMIT=$(TASK_IMAGE)" \
	--build-arg "CI_REPO=$(PACKAGE)" \
	--build-arg "CI_REPO=$$(whoami)" \
	--ssh default . \
	-t "$(TASK_IMAGE)"

	@docker push $(TASK_IMAGE)

	@data=$$(nomad var get -region ${DIVERT_CLUSTER} -out json nomad/jobs/$(NAME)) && \
	echo $${data} | nomad var put  -force -namespace "diverts" -region ${DIVERT_CLUSTER} \
	 -in json nomad/jobs/$(NAME)-${DIVERT_HOST_NAME} -

	@if [ -f nomad.variables.hcl ]; \
	then \
		sed "s/job_name = \"\(.*\)\"/job_name = \"\1-${DIVERT_HOST_NAME}\"/" \
		nomad.variables.hcl > .build/.divert.nomad.variables.hcl; \
		sed -i '' "s|nomad/jobs/$(NAME)|nomad/jobs/$(NAME)-${DIVERT_HOST_NAME}|" \
		.build/.divert.nomad.variables.hcl; \
		nomad-pack registry add remerge-pack github.com/remerge/nomad-pack; \
		nomad-pack run docker_service \
		--var='task_image=$(TASK_IMAGE)' --var='priority=$(PRIORITY)' \
		--var='cluster=${DIVERT_CLUSTER}' \
		--var='constraints=[{"attribute":"$$$${attr.unique.hostname}","value": "${DIVERT_HOST_NAME}", "operator": "="}]' \
		--var='environment=production' --namespace='diverts' \
		--var-file=.build/.divert.nomad.variables.hcl \
		--name=$(NAME)-${DIVERT_HOST_NAME} --registry=remerge-pack; \
	else \
		sed "s/job \"\(.*\)\" {/job \"\1-${DIVERT_HOST_NAME}\" \
		{/" nomad.hcl > .build/.divert.nomad.hcl; \
		sed -i '' "s|nomad/jobs/$(NAME)|nomad/jobs/$(NAME)-${DIVERT_HOST_NAME}|" \
		.build/.divert.nomad.hcl; \
		nomad job run -namespace "diverts" -region ${DIVERT_CLUSTER} \
		-var 'task_image=$(TASK_IMAGE)' -var 'cluster=${DIVERT_CLUSTER}' \
		-var 'priority=$(PRIORITY)' \
		-var 'contraint_value=${DIVERT_HOST_NAME}' -var 'environment=production' \
		-var 'contraint_attribute=attr.unique.hostname' \
		.build/.divert.nomad.hcl; \
	fi \

divert-stop: .check-dependencies .nomad-env .input-validation
	@nomad job stop -purge -namespace "diverts" \
	-region ${DIVERT_CLUSTER} $(NAME)-${DIVERT_HOST_NAME}
	@nomad var purge -namespace "diverts" -region ${DIVERT_CLUSTER} \
	nomad/jobs/$(NAME)-${DIVERT_HOST_NAME}

divert-journal: .check-dependencies .nomad-env .input-validation
	@for allocs in \
	$$(nomad job allocs -namespace "diverts" -region ${DIVERT_CLUSTER} \
	-t '{{range .}}{{printf "%s \n" .ID}}{{end}}' $(NAME)-${DIVERT_HOST_NAME}); \
	do \
	for id in \
	$$(nomad job inspect -namespace "diverts" -region ${DIVERT_CLUSTER} \
	-t '{{range .TaskGroups}} {{range .Tasks}} {{ .Name  }}{{end}}{{end}}' $(NAME)-${DIVERT_HOST_NAME}); \
	do \
	nomad alloc logs -namespace "diverts" $$allocs $$id; \
	done; \
	done;


divert-status: .check-dependencies .nomad-env .input-validation
	@echo "==> The divert for ${NAME} in ${DIVERT_CLUSTER} is \
	`nomad job inspect -namespace diverts -region ${DIVERT_CLUSTER} \
	-t '{{  .Status  }}' $(NAME)-${DIVERT_HOST_NAME}` \
	`nomad job inspect -namespace diverts -region ${DIVERT_CLUSTER}  \
	-t '{{range .TaskGroups}} {{range .Tasks}} {{ .Config.image  }}{{end}}{{end}}' \
	 $(NAME)-${DIVERT_HOST_NAME}` ...."

divert-list: .check-dependencies .nomad-env .input-validation-cluster .token-validation
	@nomad status -namespace diverts -region ${DIVERT_CLUSTER}

.PHONY: divert divert-update divert-stop divert-status .check-dependencies .input-validation .nomad-env
